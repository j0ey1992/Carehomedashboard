rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isManager() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'manager';
    }
    
    function isStaff() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'staff';
    }

    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function hasAccessToSite(site) {
      let userData = getUserData();
      return isAdmin() || 
             (isManager() && site in userData.sites) || 
             site == userData.site;
    }

    function isValidLeaveRequest() {
      let incomingData = request.resource.data;
      return incomingData.startDate is string &&
             incomingData.endDate is string &&
             incomingData.totalDays is number &&
             incomingData.totalDays > 0 &&
             incomingData.leaveType in ['Annual Leave', 'Unpaid Leave', 'Emergency Leave'] &&
             incomingData.status in ['pending', 'approved', 'declined'];
    }

    // Communication Book collections
    match /communicationBook/{entryId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.createdBy || isAdmin()
      );
      allow delete: if isAuthenticated() && (
        request.auth.uid == resource.data.createdBy || isAdmin()
      );
    }

    match /communicationComments/{commentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.createdBy || isAdmin()
      );
      allow delete: if isAuthenticated() && (
        request.auth.uid == resource.data.createdBy || isAdmin()
      );
    }

    // Leave management collections
    match /leaveRequests/{requestId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || isAdmin());
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.userId && 
        isValidLeaveRequest();
      allow update: if isAuthenticated() &&
        (request.auth.uid == resource.data.userId || isAdmin()) &&
        isValidLeaveRequest();
      allow delete: if isAdmin();
    }

    match /leaveEntitlements/{entitlementId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || isAdmin());
      allow write: if isAdmin();
    }

    match /teamLeaveCalendars/{calendarId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // User profiles
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin() || request.auth.uid == userId;
    }

    // Training records
    match /training/{trainingId} {
      allow read: if isAuthenticated();
      allow create: if isAdmin();
      allow update: if isAdmin() || (
        isStaff() && 
        request.auth.uid == resource.data.staffId && 
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['notificationPreferences', 'discussionCompleted'])
      );
      allow delete: if isAdmin();
    }

    // Notifications
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || isAdmin()
      );
      allow create: if isAdmin();
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || isAdmin()
      );
      allow delete: if isAdmin();
    }

    // Tasks
    match /tasks/{taskId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }

    // DoLS records
    match /dols/{dolsId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }

    // Supervision records
    match /supervisions/{supervisionId} {
      allow read: if isAuthenticated() && (
        resource.data.staffId == request.auth.uid || 
        resource.data.supervisorId == request.auth.uid || 
        isAdmin()
      );
      allow create, update, delete: if isAdmin();
    }

    // Activity logs
    match /activities/{activityId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAdmin();
    }

    // System settings
    match /settings/{settingId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Renewal reminders
    match /renewals/{renewalId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }

    // Staff compliance records
    match /compliance/{userId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == userId || isAdmin()
      );
      allow create, update, delete: if isAdmin();
    }

    // Sickness records
    match /sickness/{sicknessId} {
      allow read: if isAuthenticated() && (
        resource.data.staffId == request.auth.uid || // Staff can read their own records
        isAdmin() || // Admin can read all records
        (isManager() && hasAccessToSite(resource.data.site)) // Managers can read records for their sites
      );
      allow create: if isAuthenticated() && (
        isAdmin() || // Admin can create records
        (isManager() && hasAccessToSite(request.resource.data.site)) // Managers can create records for their sites
      );
      allow update: if isAuthenticated() && (
        isAdmin() || // Admin can update records
        (isManager() && hasAccessToSite(resource.data.site)) // Managers can update records for their sites
      );
      allow delete: if isAdmin(); // Only admin can delete records
    }
  }
}
